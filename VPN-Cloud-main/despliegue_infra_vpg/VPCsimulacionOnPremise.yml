#Primera prueba de plantilla de CloudFormation --> SIMULACIÓN DE LA ARQUITECTURA ON-PREMISE DEL IIC.
#Ahora mismo solo tiene una subred privada --> AMPLIAR???

AWSTemplateFormatVersion: "2010-09-09" #La única válida

Description: "Simulación del on-premise en VPC"
Parameters:
  VPCName:
    Description: Nombre de la VPC a crear
    Type: String
    Default: "VPC_prueba_OnPremise"

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "172.0.0.0/16" #Los bloques CIDR no pueden coincidir entre el on-premise y la nube, ya que con la hibridacion, se solaparian las IPs
    Private:
      CIDR: "172.0.0.0/24"
    Public:
      CIDR: "172.0.1.0/24"

  AZRegions:
      eu-west-1: #Irlanda 0
        AZs: ["a", "b"]
      eu-west-2: #Londres 1
        AZs: ["a", "b"]
      eu-south-1: #Milan 2
        AZs: ["a", "b"]     
      eu-west-3: #Paris 3
        AZs: ["a", "b"]  
      eu-south-2: #España 4
        AZs: ["a", "b"]  

Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "VPC"
            - "CIDR"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Ref 'VPCName'
  
  PublicSubnet:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Public"
            - "CIDR"
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-'
                - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
  
  PrivateSubnet:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda 
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Private"
            - "CIDR"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-private-'
                - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]


  InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-IGW'

  GatewayToInternet:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "VPC"
        InternetGatewayId:
          Ref: "InternetGateway"

  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-route-table'

  PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "GatewayToInternet"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "InternetGateway"

  PublicSubnetRouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet" 
        RouteTableId:
          Ref: "PublicRouteTable"
  
  PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-nacl'

  InboundHTTPPublicNetworkAclEntry: 
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

  OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

  PublicSubnetNetworkAclAssociation:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

  ElasticIPprivate:
      Type: "AWS::EC2::EIP"
      Properties:
        Domain: "vpc"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102

  ElasticIPvpn:
      Type: "AWS::EC2::EIP"
      Properties:
        Domain: "vpc"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102

  NATGateway:
      Type: "AWS::EC2::NatGateway"
      Properties:
        AllocationId:
          Fn::GetAtt:
            - "ElasticIPprivate"
            - "AllocationId"
        SubnetId:
          Ref: "PrivateSubnet"

  PrivateRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-private-route-table'

  PrivateRouteToInternet:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId:
          Ref: "NATGateway"

  PrivateSubnetRouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet"
        RouteTableId:
          Ref: "PrivateRouteTable"


Outputs:

    VPCId:
      Description: "VPCId of VPC"
      Value:
        Ref: "VPC"
      Export:
        Name: "vpc-onpremise-id"
    
    PublicSubnet:
      Description: "SubnetId of public subnet"
      Value:
        Ref: "PublicSubnet"
      Export:
        Name: "public-subnet-id"

    PrivateSubnet:
      Description: "SubnetId of private subnet"
      Value:
        Ref: "PrivateSubnet"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet"

    VpnEIP:
      Description: Instance EIP
      Value: !Ref ElasticIPvpn
      Export:
        Name: "vpn-eip"

    DefaultSecurityGroup:
      Description: "DefaultSecurityGroup Id"
      Value: !GetAtt VPC.DefaultSecurityGroup
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup"