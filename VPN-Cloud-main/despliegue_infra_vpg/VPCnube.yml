AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC correspondiente a la nube 'real'"
Parameters:
  VPCName:
    Description: The name of the VPC being created.
    Type: String
    Default: "VPC_prueba_nube"

Mappings:
    SubnetConfig:
      VPC:
        CIDR: "10.0.0.0/16"
      Public0:
        CIDR: "10.0.0.0/24"
      Public1:
        CIDR: "10.0.1.0/24"
      Private0:
        CIDR: "10.0.2.0/24"
      Private1:
        CIDR: "10.0.3.0/24"
      

    AZRegions:
      eu-west-1: #Irlanda 0
        AZs: ["a", "b"]
      eu-west-2: #Londres 1
        AZs: ["a", "b"]
      eu-south-1: #Milan 2
        AZs: ["a", "b"]     
      eu-west-3: #Paris 3
        AZs: ["a", "b"]  
      eu-south-2: #Espa√±a 4
        AZs: ["a", "b"]  

Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "VPC"
            - "CIDR"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: 
              Ref: 'VPCName'

  PublicSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Public0"
            - "CIDR"
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-'
                - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
  PublicSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Public1"
            - "CIDR"
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-'
                - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda 
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Private0"
            - "CIDR"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-private-'
                - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
  
  # # PrivateSubnet1:
  # #     Type: "AWS::EC2::Subnet"
  # #     Properties:
  # #       VpcId:
  # #         Ref: "VPC"
  # #       AvailabilityZone:
  # #         Fn::Sub:
  # #           - "${AWS::Region}${AZ}"
  # #           - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda 
  # #       CidrBlock:
  # #         Fn::FindInMap:
  # #           - "SubnetConfig"
  # #           - "Private1"
  # #           - "CIDR"
  # #       Tags:
  # #         -
  # #           Key: "OPI-Code"
  # #           Value: 008_807102
  # #         -
  # #           Key: "Application"
  # #           Value:
  # #             Ref: "AWS::StackName"
  # #         -
  # #           Key: "Network"
  # #           Value: "Private"
  # #         -
  # #           Key: "Name"
  # #           Value: !Join
  # #             - ''
  # #             - - !Ref "VPCName"
  # #               - '-private-'
  # #               - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-IGW'


  GatewayToInternet:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "VPC"
        InternetGatewayId:
          Ref: "InternetGateway"

  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-route-table'


  PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "GatewayToInternet"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "InternetGateway"

  PublicSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0" 
        RouteTableId:
          Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet1" 
        RouteTableId:
          Ref: "PublicRouteTable"
  
  PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-nacl'

  InboundHTTPPublicNetworkAclEntry: 
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

  OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

  PublicSubnetNetworkAclAssociation0:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

  PublicSubnetNetworkAclAssociation1:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet1"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

  ElasticIP0:
      Type: "AWS::EC2::EIP"
      Properties:
        Domain: "vpc"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102

  # # ElasticIP1:
  # #     Type: "AWS::EC2::EIP"
  # #     Properties:
  # #       Domain: "vpc"
  # #       Tags:
  # #         -
  # #           Key: "OPI-Code"
  # #           Value: 008_807102

  NATGateway0:
      Type: "AWS::EC2::NatGateway"
      Properties:
        AllocationId:
          Fn::GetAtt:
            - "ElasticIP0"
            - "AllocationId"
        SubnetId:
          Ref: "PrivateSubnet0"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102

  # # NATGateway1:
  # #     Type: "AWS::EC2::NatGateway"
  # #     Properties:
  # #       AllocationId:
  # #         Fn::GetAtt:
  # #           - "ElasticIP1"
  # #           - "AllocationId"
  # #       SubnetId:
  # #         Ref: "PrivateSubnet1"
  # #       Tags:
  # #         -
  # #           Key: "OPI-Code"
  # #           Value: 008_807102

  PrivateRouteTable0:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-private-route-table-0'
              
  # # PrivateRouteTable1:
  # #     Type: "AWS::EC2::RouteTable"
  # #     Properties:
  # #       VpcId:
  # #         Ref: "VPC"
  # #       Tags:
  # #         -
  # #           Key: "OPI-Code"
  # #           Value: 008_807102
  # #         -
  # #           Key: "Name"
  # #           Value: !Join
  # #             - ''
  # #             - - !Ref "VPCName"
  # #               - '-private-route-table-1'

  PrivateRouteToInternet0:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable0"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId:
          Ref: "NATGateway0"

  # # PrivateRouteToInternet1:
  # #     Type: "AWS::EC2::Route"
  # #     Properties:
  # #       RouteTableId:
  # #         Ref: "PrivateRouteTable1"
  # #       DestinationCidrBlock: "0.0.0.0/0"
  # #       NatGatewayId:
  # #         Ref: "NATGateway1"

  PrivateSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet0"
        RouteTableId:
          Ref: "PrivateRouteTable0"

  # # PrivateSubnetRouteTableAssociation1:
  # #     Type: "AWS::EC2::SubnetRouteTableAssociation"
  # #     Properties:
  # #       SubnetId:
  # #         Ref: "PrivateSubnet1"
  # #       RouteTableId:
  # #         Ref: "PrivateRouteTable1"

  #CONEXION CON VPN
  VPNCustomerGateway:
      Type: "AWS::EC2::CustomerGateway"
      Properties:
        BgpAsn: 65000
        IpAddress: !ImportValue vpn-eip
        Type: "ipsec.1" 
        Tags:
          -
            Key: "Name"
            Value: "customer-gateway"
          -
            Key: "OPI-Code"
            Value: 008_807102
    
  VPNGateway:
      Type: AWS::EC2::VPNGateway
      Properties: 
        AmazonSideAsn: 64512
        Type: "ipsec.1"
        Tags: 
          -
            Key: "OPI-Code"
            Value: 008_807102

  VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        VpnGatewayId:
          Ref: VPNGateway
        VpcId:
          Ref: VPC

  VPNConnection:
      Type: AWS::EC2::VPNConnection
      Properties: 
        CustomerGatewayId:
          Ref: VPNCustomerGateway
        StaticRoutesOnly: "false"
        Type: "ipsec.1"
        VpnGatewayId:
          Ref: VPNGateway
        Tags: 
          -
            Key: "OPI-Code"
            Value: 008_807102

  # VPNConnectionRoute:
  #     Type: AWS::EC2::VPNConnectionRoute
  #     Properties: 
  #       DestinationCidrBlock: "172.0.0.0/16" 
  #       VpnConnectionId:
  #         Ref: VPNConnection


  VPNPropagationRoute:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties: 
      RouteTableIds: 
        - !Ref PrivateRouteTable0
        # - !Ref PrivateRouteTable1
        - !Ref PublicRouteTable
      VpnGatewayId: !Ref VPNGateway



  PrivateRouteToOnPremise0:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable0"
        DestinationCidrBlock: "172.0.0.0/16"
        GatewayId:
          Ref: "VPNGateway"

  # # PrivateRouteToOnPremise1:
  # #     Type: "AWS::EC2::Route"
  # #     Properties:
  # #       RouteTableId:
  # #         Ref: "PrivateRouteTable1"
  # #       DestinationCidrBlock: "172.0.0.0/16"
  # #       GatewayId:
  # #         Ref: "VPNGateway"

  PublicRouteToOnPremise:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "172.0.0.0/16"
        GatewayId:
          Ref: "VPNGateway"

        
Outputs:

    VPCId:
      Description: "VPCId of VPC"
      Value:
        Ref: "VPC"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-VPC"

    PublicSubnet0:
      Description: "SubnetId of public subnet 0"
      Value:
        Ref: "PublicSubnet0"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet0"

    PublicSubnet1:
      Description: "SubnetId of public subnet 1"
      Value:
        Ref: "PublicSubnet1"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet1"


    PrivateSubnet0:
      Description: "SubnetId of private subnet 0"
      Value:
        Ref: "PrivateSubnet0"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet0"
    
    VPNConnection:
      Value:
        Ref: "VPNConnection"
      Export:
        Name: vpc-nube-vpnconnection

    # # PrivateSubnet1:
    # #   Description: "SubnetId of private subnet 1"
    # #   Value:
    # #     Ref: "PrivateSubnet1"
    # #   Export:
    # #     Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet1"

    DefaultSecurityGroup:
      Description: "DefaultSecurityGroup Id"
      Value: !GetAtt VPC.DefaultSecurityGroup
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup"
