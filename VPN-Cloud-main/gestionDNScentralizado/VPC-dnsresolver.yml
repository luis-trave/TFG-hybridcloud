AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC de servicios compartidos con DNS Resolver"
Parameters:
  VPCName:
    Description: The name of the VPC being created.
    Type: String
    Default: "VPC_dns"

Mappings:
    SubnetConfig:
      VPC:
        CIDR: "10.1.0.0/16"
      Public0:
        CIDR: "10.1.0.0/24"
      Public1:
        CIDR: "10.1.1.0/24"
      Private0:
        CIDR: "10.1.2.0/24"
      Private1:
        CIDR: "10.1.3.0/24"
      

    AZRegions:
      eu-west-1: #Irlanda 0
        AZs: ["a", "b"]
      eu-west-2: #Londres 1
        AZs: ["a", "b"]
      eu-south-1: #Milan 2
        AZs: ["a", "b"]     
      eu-west-3: #Paris 3
        AZs: ["a", "b"]  
      eu-south-2: #España 4
        AZs: ["a", "b"] 

Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "VPC"
            - "CIDR"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: 
              Ref: 'VPCName'

  PublicSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Public0"
            - "CIDR"
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-'
                - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda 
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "Private0"
            - "CIDR"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-private-'
                - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-route-table'


  PublicSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0" 
        RouteTableId:
          Ref: "PublicRouteTable"
  
  PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-nacl'

  InboundHTTPPublicNetworkAclEntry: 
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

  OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

  PublicSubnetNetworkAclAssociation0:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

  PrivateRouteTable0:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-private-route-table-0'

  PrivateSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet0"
        RouteTableId:
          Ref: "PrivateRouteTable0"

  #Security group
  DnsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Grupo de seguridad para permitir propagacion de DNS
      GroupName: dns-SG
      VpcId: 
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0



  #DNS RESOLVER
  OutboundDnsResolver:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: OUTBOUND
      IpAddresses:
        - SubnetId:
            Ref: PublicSubnet0
        - SubnetId:
            Ref: PrivateSubnet0
      Name: "Outbound-DNS-Resolver"
      SecurityGroupIds:
        - Ref: DnsSecurityGroup
      Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102

  InboundDnsResolver:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: INBOUND
      IpAddresses:
        - SubnetId:
            Ref: PublicSubnet0
          Ip: 10.1.0.7
        - SubnetId:
            Ref: PrivateSubnet0
          Ip: 10.1.2.7
      Name: "Inbound-DNS-Resolver"
      SecurityGroupIds:
        - Ref: DnsSecurityGroup
      Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102

  ResolverRuleToOnPremise:
    Type: 'AWS::Route53Resolver::ResolverRule'
    Properties:
      DomainName: 'onprem.iic'
      RuleType: 'FORWARD'
      Name: MyOnPremRule
      TargetIps:
        - 
          Ip: '172.0.0.2' 
          Port: 53
      ResolverEndpointId: !Ref OutboundDnsResolver

  ResolverRuleAWS:
    Type: 'AWS::Route53Resolver::ResolverRule'
    Properties:
      DomainName: 'awscloud.iic' 
      RuleType: 'FORWARD'
      Name: MyAWSRule
      TargetIps:
        - Ip: 10.1.0.7
          Port: 53
        - Ip: 10.1.2.7
          Port: 53
      ResolverEndpointId: !Ref OutboundDnsResolver
  
  RuleOnPremiseAssociation:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      ResolverRuleId: 
        Ref: ResolverRuleToOnPremise
      VPCId:
        Ref: VPC

  OnPremRuleToAWSAssociation:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      ResolverRuleId: 
        Ref: ResolverRuleAWS
      VPCId: !ImportValue vpc-onpremise-id

  #Conexión site-to-site vpn con transit gateway
  VPNCustomerGateway:
      Type: "AWS::EC2::CustomerGateway"
      Properties:
        BgpAsn: 65000
        IpAddress: !ImportValue vpn-eip
        Type: "ipsec.1" 
        Tags:
          -
            Key: "Name"
            Value: "customer-gateway"
          -
            Key: "OPI-Code"
            Value: 008_807102
    
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AmazonSideAsn: 64512
      MulticastSupport: enable
      Description: VPC transit gateway
      AutoAcceptSharedAttachments: enable
      DefaultRouteTableAssociation: enable
      DefaultRouteTablePropagation: enable
      DnsSupport: enable
      VpnEcmpSupport: enable
      Tags:
        -
            Key: "OPI-Code"
            Value: 008_807102

  TransitGatewayAttachment:
    Type: 'AWS::EC2::TransitGatewayAttachment'
    Properties:
      SubnetIds:
        - !Ref PublicSubnet0
        - !Ref PrivateSubnet0
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref VPC
      Tags:
        -
            Key: "OPI-Code"
            Value: 008_807102

  VPNConnection:
      Type: AWS::EC2::VPNConnection
      Properties: 
        CustomerGatewayId:
          Ref: VPNCustomerGateway
        StaticRoutesOnly: "false"
        Type: "ipsec.1"
        TransitGatewayId:
          Ref: TransitGateway
        Tags: 
          -
            Key: "OPI-Code"
            Value: 008_807102

  PrivateRouteToOnPremise0:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable0"
        DestinationCidrBlock: "172.0.0.0/16"
        TransitGatewayId:
          Ref: "TransitGateway"

  PublicRouteToOnPremise:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "172.0.0.0/16"
        TransitGatewayId:
          Ref: "TransitGateway"


  #Rutas
        
  PublicRouteToVPC1:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "192.168.0.0/20"
        TransitGatewayId:
          Ref: "TransitGateway"

  PrivateRouteToVPC1:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable0"
        DestinationCidrBlock: "192.168.0.0/20"
        TransitGatewayId:
          Ref: "TransitGateway"

  PublicRouteToVPC2:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "192.168.16.0/20"
        TransitGatewayId:
          Ref: "TransitGateway"

  PrivateRouteToVPC2:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable0"
        DestinationCidrBlock: "192.168.16.0/20"
        TransitGatewayId:
          Ref: "TransitGateway"
Outputs:

    VPCId:
      Description: "VPCId of VPC"
      Value:
        Ref: "VPC"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-VPC"

    PublicSubnet0:
      Description: "SubnetId of public subnet 0"
      Value:
        Ref: "PublicSubnet0"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet0"

    PrivateSubnet0:
      Description: "SubnetId of private subnet 0"
      Value:
        Ref: "PrivateSubnet0"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet0"
    
    VPNConnection:
      Value:
        Ref: "VPNConnection"
      Export:
        Name: vpc-dns-vpnconnection
    
    TransitGateway:
      Value:
        Ref: "TransitGateway"
      Export:
        Name: vpc-dns-transitgateway

    DnsOutboundEndpoint:
      Description: "Outbound endpoint of the VPC DNS Resolver"
      Value: !Ref OutboundDnsResolver
      Export:
        Name: resolver-outbound-endpoint

    RuleToCloud:
      Value: !Ref ResolverRuleAWS
      Export:
        Name: resolver-rule-to-cloud
      
    RuleToOnPrem:
      Value: !Ref ResolverRuleToOnPremise
      Export:
        Name: resolver-rule-to-onprem

    DefaultSecurityGroup:
      Description: "DefaultSecurityGroup Id"
      Value: !GetAtt VPC.DefaultSecurityGroup
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup"