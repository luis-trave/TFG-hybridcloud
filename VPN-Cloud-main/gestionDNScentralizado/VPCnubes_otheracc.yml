AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC de cualquier cuenta"
Parameters:
  VPCName:
    Description: The name of the VPC being created.
    Type: String
    Default: "VPC_prueba_nube"
  
  VpcCIDR:
    Description: Bloque CIDR de la VPC
    Type: String
  
  PublicSubnetCIDR:
    Description: Bloque CIDR de la subred publica
    Type: String
  
  PrivateSubnetCIDR:
    Description: Bloque CIDR de la subred privada
    Type: String
  
  TransitGWId:
    Description: ID del TransitGW
    Type: String

  RuleToCloud:
    Description: ID de de ResolverRule hacia la nube
    Type: String

  RuleToOnPrem:
    Description: ID de de ResolverRule hacia on premise
    Type: String

Mappings:
    AZRegions:
      eu-west-1: #Irlanda 0
        AZs: ["a", "b"]
      eu-west-2: #Londres 1
        AZs: ["a", "b"]
      eu-south-1: #Milan 2
        AZs: ["a", "b"]     
      eu-west-3: #Paris 3
        AZs: ["a", "b"]  
      eu-south-2: #Espa√±a 4
        AZs: ["a", "b"]  

Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock:
          Ref: VpcCIDR
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: 
              Ref: 'VPCName'

  PublicSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda
        CidrBlock:
          Ref: PublicSubnetCIDR
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-'
                - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ] #Irlanda 
        CidrBlock:
          Ref: PrivateSubnetCIDR
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-private-'
                - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-IGW'


  GatewayToInternet:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "VPC"
        InternetGatewayId:
          Ref: "InternetGateway"

  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-route-table'


  PublicRouteToInternet:
      Type: "AWS::EC2::Route"
      DependsOn: "GatewayToInternet"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "InternetGateway"


  PublicSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0" 
        RouteTableId:
          Ref: "PublicRouteTable"
  
  PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-nacl'

  InboundHTTPPublicNetworkAclEntry: 
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

  OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

  PublicSubnetNetworkAclAssociation0:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

  ElasticIP0:
      Type: "AWS::EC2::EIP"
      Properties:
        Domain: "vpc"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102

  NATGateway0:
      Type: "AWS::EC2::NatGateway"
      Properties:
        AllocationId:
          Fn::GetAtt:
            - "ElasticIP0"
            - "AllocationId"
        SubnetId:
          Ref: "PrivateSubnet0"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102

  PrivateRouteTable0:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "OPI-Code"
            Value: 008_807102
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-private-route-table-0'

  PrivateRouteToInternet0:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable0"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId:
          Ref: "NATGateway0"

  PrivateSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet0"
        RouteTableId:
          Ref: "PrivateRouteTable0"

  #CONEXION CON VPN
  TransitGatewayAttachment:
    Type: 'AWS::EC2::TransitGatewayAttachment'
    Properties:
      SubnetIds:
        - !Ref PublicSubnet0
        - !Ref PrivateSubnet0
      TransitGatewayId: !Ref TransitGWId
      VpcId: !Ref VPC
      Tags:
        -
            Key: "OPI-Code"
            Value: 008_807102

  PublicRouteToTGW:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "172.0.0.0/16"
        TransitGatewayId: !Ref TransitGWId

  PrivateRouteToTGW:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable0"
        DestinationCidrBlock: "172.0.0.0/16"
        TransitGatewayId: !Ref TransitGWId

  PublicRouteToDNS:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "10.1.0.0/16"
        TransitGatewayId: !Ref TransitGWId

  PrivateRouteToDNS:
      Type: "AWS::EC2::Route"
      DependsOn: "TransitGatewayAttachment"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable0"
        DestinationCidrBlock: "10.1.0.0/16"
        TransitGatewayId: !Ref TransitGWId

  RuleOnPremiseAssociation:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      ResolverRuleId: !Ref RuleToOnPrem
      VPCId:
        Ref: VPC

  RuleCloudAssociation:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      ResolverRuleId: !Ref RuleToCloud
      VPCId:
        Ref: VPC
        
Outputs:

    VPCId:
      Description: "VPCId of VPC"
      Value:
        Ref: "VPC"
      Export:
        Name: !Sub "vpc-luis-nube3-ia"

    PublicSubnet0:
      Description: "SubnetId of public subnet 0"
      Value:
        Ref: "PublicSubnet0"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet0"

    PrivateSubnet0:
      Description: "SubnetId of private subnet 0"
      Value:
        Ref: "PrivateSubnet0"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet0"

    DefaultSecurityGroup:
      Description: "DefaultSecurityGroup Id"
      Value: !GetAtt VPC.DefaultSecurityGroup
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup"